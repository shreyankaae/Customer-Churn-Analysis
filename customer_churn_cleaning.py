# -*- coding: utf-8 -*-
"""customer_churn_cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n7nHk4r5rEaZto8iCNRLEeKv3icvzNGD
"""

!pip install shap xgboost scikit-learn pandas matplotlib seaborn joblib
!pip install ydata-profiling

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#EDA Report
from ydata_profiling import ProfileReport

# For model training
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

import pandas as pd
df = pd.read_csv("/content/Telco_customer_churn.csv", encoding='utf-8', delimiter=',', skip_blank_lines=True)

print("Shape:", df.shape)
print("Columns:", df.columns.tolist())
df.head()

print("Shape of dataset:", df.shape)
print("Column names:\n", df.columns)
df.info()
df.describe()

df.isnull().sum()

"""# EDA

Univariate analysis
"""

sns.countplot(data=df, x='Churn', palette='pastel')
plt.title('Churn Distribution')
plt.show()

print(df['Churn'].value_counts(normalize=True))

sns.boxplot(x='churn_value', y='monthly_charges', palette='pastel', data=df)

sns.histplot(df['tenure_months'], bins=30, kde=True, color='skyblue')
plt.title('Distribution of Tenure')
plt.show()

sns.countplot(data=df, x='contract', palette='Set2')
plt.title('Contract Type Distribution')
plt.xticks(rotation=45)
plt.show()

"""BIVERATE"""

sns.countplot(data=df, x='contract', hue='Churn', palette='Set2')
plt.title('Churn by Contract Type')
plt.xticks(rotation=45)
plt.show()

sns.boxplot(data=df, x='Churn', y='tenure_months', palette='coolwarm')
plt.title('Tenure vs Churn')
plt.show()

"""correlation matrix"""

plt.figure(figsize=(10, 6))
corr = df.corr(numeric_only=True)
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

profile = ProfileReport(df, title='Telco Churn EDA Report', explorative=True)
profile.to_notebook_iframe()
profile.to_file("telco_eda_report.pdf")

"""# Data Cleaning

"""

df.drop('customer_id', axis=1, inplace=True)

cat_cols = df.select_dtypes(include='object').columns
for col in cat_cols:
    df[col].fillna(df[col].mode()[0], inplace=True)

#numerical columns with median
num_cols = df.select_dtypes(include=['int64', 'float64']).columns
for col in num_cols:
    df[col].fillna(df[col].median(), inplace=True)

print("Nulls after imputation:\n", df.isnull().sum().sum())  # should be 0
print("Final shape after cleaning:", df.shape)

df.isnull().sum()

print(df.shape)

df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})

df.to_csv('cleaned_telco.csv', index=False)